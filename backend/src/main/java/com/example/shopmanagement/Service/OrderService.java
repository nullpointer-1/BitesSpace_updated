package com.example.shopmanagement.Service;

import com.example.shopmanagement.dto.OrderRequestDto;
import com.example.shopmanagement.dto.OrderResponseDto;
import com.example.shopmanagement.dto.OrderItemDto;
import com.example.shopmanagement.dto.OrderStatusUpdateDto;

import com.example.shopmanagement.document.OrderDocument;
import com.example.shopmanagement.document.OrderItemDocument;

import com.example.shopmanagement.model.Product;
import com.example.shopmanagement.model.Shop;
import com.example.shopmanagement.model.Vendor;

import com.example.shopmanagement.repository.OrderDocumentRepository;
import com.example.shopmanagement.repository.ProductRepository;
import com.example.shopmanagement.repository.ShopRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class OrderService {

    @Autowired
    private OrderDocumentRepository orderDocumentRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private ShopRepository shopRepository;

    @Autowired
    private EmailService emailService;

    @Autowired
    private WebSocketService webSocketService;

 // ... (existing imports)
 // import com.example.shopmanagement.model.OrderDocument; // Assuming this is your OrderDocument path
 // import com.example.shopmanagement.model.Shop;
 // import com.example.shopmanagement.model.Vendor;
 // import com.example.shopmanagement.model.Product;
 // import com.example.shopmanagement.model.OrderItemDocument;


    @Transactional
    public OrderResponseDto createOrder(OrderRequestDto orderRequest) {
        // Retrieve Shop details
        Shop shop = shopRepository.findById(orderRequest.getShopId())
                .orElseThrow(() -> new RuntimeException("Shop not found with ID: " + orderRequest.getShopId()));

        // Retrieve Vendor details from Shop
        Vendor vendor = shop.getVendor();
        if (vendor == null) {
            throw new RuntimeException("Shop has no associated vendor: " + orderRequest.getShopId());
        }

        // Map OrderItemRequestDto to OrderItemDocument, fetching product details
        List<OrderItemDocument> orderItemDocuments = orderRequest.getItems().stream().map(itemDto -> {
            Product product = productRepository.findById(itemDto.getProductId())
                    .orElseThrow(() -> new RuntimeException("Product not found with ID: " + itemDto.getProductId()));

            return new OrderItemDocument(
                    String.valueOf(product.getId()), // Convert Long to String for productId
                    product.getName(),
                    itemDto.getPriceAtOrder(),
                    itemDto.getQuantity(),
                    product.getImageUrl(),
                    product.isVeg()
            );
        }).collect(Collectors.toList());

        String generatedOrderId = java.util.UUID.randomUUID().toString(); // Generate unique UUID for order

        Instant currentOrderTime = Instant.now();
        Instant estimatedPickupInstant = orderRequest.getEstimatedPickupTime(); 
        // You might want to add a fallback if estimatedPickupTime is null from DTO:
        // if (estimatedPickupInstant == null) {
        //     estimatedPickupInstant = currentOrderTime.plus(java.time.Duration.ofMinutes(30)); // Default 30 mins
        // }

        // Create the OrderDocument
        OrderDocument orderDocument = new OrderDocument(
                null,                             // MongoDB _id (auto-generated by Mongo)
                generatedOrderId,                 // Your custom UUID orderId
                orderRequest.getCustomerEmail(),
                orderRequest.getUserId(),         // <--- HERE: Pass the userId from the DTO
                shop.getId(),
                shop.getName(),
                shop.getAddress(),
                vendor.getId(),
                vendor.getName(),
                orderRequest.getCustomerName(),   // Assuming this is passed in DTO
                orderRequest.getCustomerPhone(),  // Assuming this is passed in DTO
                orderRequest.getTotalAmount(),
                "PLACED",                         // Initial status
                currentOrderTime,                 // Actual order placement time
                estimatedPickupInstant,           // Estimated pickup time
                orderItemDocuments                // List of order items
        );
        
       
        OrderDocument savedOrderDocument = orderDocumentRepository.save(orderDocument);

        // Send confirmation email
        emailService.sendOrderConfirmationEmail(
                savedOrderDocument.getCustomerEmail(),
                savedOrderDocument.getOrderId(), // Use the generated UUID here for email
                orderRequest
        );

        // Send WebSocket notifications
        webSocketService.sendNewOrderNotification(vendor.getUsername(), savedOrderDocument);
        webSocketService.sendGeneralNotification(
            vendor.getUsername(),
            "Alert: New order #" + savedOrderDocument.getOrderId().substring(0, 8) + " has arrived!"
        );

        // Return a response DTO with the generated orderId
        return new OrderResponseDto(savedOrderDocument.getOrderId(), "Order placed successfully and confirmation email sent.");
    }

    // --- IMPORTANT: Adjust updateOrderStatus too if you want to use Instant for time fields consistently ---
    @Transactional
    public OrderDocument updateOrderStatus(OrderStatusUpdateDto updateDto) {
        // --- CRITICAL FIX HERE ---
        // Change from findById to findByOrderId because updateDto.getOrderId()
        // contains your custom UUID (e.g., from QR code), not the MongoDB _id.
    	OrderDocument order = orderDocumentRepository.findByOrderId(updateDto.getOrderId())
    	        .orElseThrow(() -> new RuntimeException("Order not found with ID: " + updateDto.getOrderId()));
        // ... (rest of your updateOrderStatus method, which remains the same) ...

        String newStatus = updateDto.getNewStatus().toUpperCase();
        if (!isValidStatusTransition(order.getStatus(), newStatus)) {
            throw new RuntimeException("Invalid status transition from " + order.getStatus() + " to " + newStatus);
        }

        order.setStatus(newStatus);

        if (newStatus.equals("READY_FOR_PICKUP")) {
            order.setEstimatedPickupTime(Instant.now());
        } else if (newStatus.equals("COMPLETED") || newStatus.equals("REJECTED")) {
            // Decide here: Set to current time or null, or add a separate field
            order.setEstimatedPickupTime(Instant.now()); // Example: set to current time
        }

        OrderDocument updatedOrder = orderDocumentRepository.save(order);

        webSocketService.sendOrderStatusUpdateToCustomer(updatedOrder.getOrderId(), updatedOrder);
        System.out.println("Backend: Sent order status update for order " + updatedOrder.getOrderId() + " to customer's topic.");

        webSocketService.sendOrderStatusUpdateToVendor(updatedOrder.getVendorName(), updatedOrder);
        System.out.println("Backend: Sent order status update for order " + updatedOrder.getOrderId() + " to vendor's topic.");

        emailService.sendOrderStatusUpdateEmail(updatedOrder.getCustomerEmail(), updatedOrder.getOrderId(), updatedOrder.getStatus());
        System.out.println("Backend: Sent email update for order " + updatedOrder.getOrderId() + " to " + updatedOrder.getCustomerEmail());

        return updatedOrder;
    }


    private boolean isValidStatusTransition(String currentStatus, String newStatus) {
        switch (currentStatus) {
            case "PLACED":
                return newStatus.equals("PREPARING") || newStatus.equals("REJECTED");
            case "PREPARING":
                return newStatus.equals("READY_FOR_PICKUP") || newStatus.equals("REJECTED");
            case "READY_FOR_PICKUP":
                return newStatus.equals("COMPLETED");
            case "COMPLETED":
            case "REJECTED":
                return false;
            default:
                return false;
        }
    }

    public OrderDocument getOrderById(String orderId) {
        return orderDocumentRepository.findByOrderId(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found with ID: " + orderId));
    }

    public List<OrderDocument> getOrdersByVendorId(Long vendorId) {
        return orderDocumentRepository.findByVendorId(vendorId);
    }

    public Optional<OrderDocument> findByOrderId(String orderId) {
        return orderDocumentRepository.findByOrderId(orderId);
    }
    // NEW METHOD: Get orders by user ID
    public List<OrderDocument> getOrdersByUserId(Long userId) {
        // You might want to sort these from the service layer, or rely on the controller to sort.
        // For example: return orderDocumentRepository.findByUserIdOrderByOrderDateDesc(userId);
        return orderDocumentRepository.findByUserId(userId);
    }
}